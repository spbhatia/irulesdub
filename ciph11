def extract_virtual_servers_and_profiles(config_text):
    virtual_servers = {}
    current_virtual_server = None
    # These variables hold the profile names found right before the context lines
    client_profile_candidate = None
    server_profile_candidate = None

    # Flag to start processing after this marker
    processing = False

    for line in config_text.split('\n'):
        line = line.strip()

        if "############ MultiConfigPart Running configuration (Not deployable)" in line:
            processing = True
            continue

        if processing:
            if line.startswith('ltm virtual') and '/common' not in line:
                current_virtual_server = line.split(' ')[2]
                virtual_servers[current_virtual_server] = {'client_side': None, 'server_side': None}
                # Reset the profile candidates when a new virtual server block starts
                client_profile_candidate = None
                server_profile_candidate = None

            if current_virtual_server:
                # Look for profile names based on context lines
                if 'context clientside' in line:
                    # Assign the last profile name captured as the client-side profile
                    virtual_servers[current_virtual_server]['client_side'] = client_profile_candidate
                    client_profile_candidate = None
                elif 'context serverside' in line:
                    # Assign the last profile name captured as the server-side profile
                    virtual_servers[current_virtual_server]['server_side'] = server_profile_candidate
                    server_profile_candidate = None
                else:
                    # Check if the line could be a profile name (ignoring lines with just braces)
                    if line and '{' in line and not line.startswith('}'):
                        profile_name = line.split(' ')[0]
                        if client_profile_candidate is not None:
                            # The last profile name is now assumed to be for server-side context
                            server_profile_candidate = profile_name
                        else:
                            # Capture the first profile name after the profiles block starts
                            client_profile_candidate = profile_name

            # Check if we have reached the end of a virtual server block
            if 'vs-index' in line:
                current_virtual_server = None  # End of the current virtual server block

    return virtual_servers

# Main script to read the file and extract information
def main(config_file_path):
    with open(config_file_path, 'r') as file:
        config_text = file.read()

    virtual_servers = extract_virtual_servers_and_profiles(config_text)

    # Print out the results
    for virtual_server, profiles in virtual_servers.items():
        print(f"Virtual Server: {virtual_server}, Client-Side Profile: {profiles['client_side'] or 'None'}, Server-Side Profile: {profiles['server_side'] or 'None'}")

# Call the main function with the configuration file path
main('f5_config.txt')