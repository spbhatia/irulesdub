def find_unused_client_profiles(client_profiles, used_client_profiles):
    """Identify client-ssl profiles that are not used in any virtual server."""
    used_names = {prof['name'] for prof in used_client_profiles}
    unused_profiles = []
    for prof in client_profiles:
        if prof['name'] not in used_names:
            cipher_remark = validate_cipher_and_options(prof['ciphers'], prof['options'])
            prof['Cipher Remark'] = cipher_remark  # Add cipher remark to each unused profile
            unused_profiles.append(prof)
    return unused_profiles

def create_excel(client_profiles, server_profiles, virtual_servers, monitor_ssl_profiles):
    """Create an Excel file with extracted data, including cipher validation for unused profiles."""
    client_data = []
    server_data = []

    # Existing logic to prepare client_data and server_data
    # ...

    # Identify unused profiles
    unused_clients = find_unused_client_profiles(client_profiles, used_client_profiles)
    unused_servers = find_unused_server_profiles(server_profiles, used_server_profiles, monitor_ssl_profiles)

    # Write to Excel using pandas ExcelWriter
    with pd.ExcelWriter('SSL_Profiles.xlsx', engine='openpyxl') as writer:
        pd.DataFrame(client_data).to_excel(writer, sheet_name='Used Client-SSL Profiles', index=False)
        pd.DataFrame(server_data).to_excel(writer, sheet_name='Used Server-SSL Profiles', index=False)
        pd.DataFrame(unused_clients).to_excel(writer, sheet_name='Unused Client-SSL Profiles', index=False)
        pd.DataFrame(unused_servers).to_excel(writer, sheet_name='Unused Server-SSL Profiles', index=False)


))###########

def find_unused_client_profiles(all_profiles, used_profiles):
    """Identify profiles that are not used in any virtual server, including cipher remark."""
    # Ignore default Client-ssl profiles
    defaultclientsssl = (
        'clientssl', 'clientssl-insecure-compatible', 'clientssl-quic', 
        'clientssl-secure', 'crsptisession-default-clientssl', 'wom-default-clientssl'
    )

    # Gather used profile names to exclude from unused list
    used_names = {prof['name'] for prof in used_profiles}

    # Prepare unused profiles list with cipher remarks
    unused_profiles = []
    for prof in all_profiles:
        if prof['name'] not in used_names and prof['name'] not in defaultclientsssl:
            cipher_remark = validate_cipher_and_options(prof['ciphers'], prof['options'])
            prof['Cipher Remark'] = cipher_remark  # Add cipher remark to each unused profile
            unused_profiles.append(prof)

    return unused_profiles